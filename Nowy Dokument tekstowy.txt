// --- Inside PipelineSystem Class ---








using System;
using System.Collections.Generic;

// --- The Single Containing Class ---
public class PipelineSystem
{
    // --- 1. Context Class (Nested) ---
    public class Context
    {
        public Context()
        {
            UniqueToken = Guid.NewGuid();
            Logs = new List<string>();
            // Initialize start time here or let Execute handle it
            // ProcessStartedAt = DateTime.Now; // Option 1: Initialize here
        }

        public Guid UniqueToken { get; }
        public DateTime ProcessStartedAt { get; set; }
        public DateTime ProcessEndedAt { get; set; }

        public long ProcessTimeInMilliseconds
        {
            get
            {
                // Handle cases where End might not be set yet if accessed prematurely
                if (ProcessEndedAt < ProcessStartedAt) return -1;
                return (long)ProcessEndedAt.Subtract(ProcessStartedAt).TotalMilliseconds;
            }
        }

        public List<string> Logs { get; set; }

        public void Log(string message)
        {
            Logs.Add($"{DateTime.Now:O} [{UniqueToken}] - {message}");
        }
    }

    // --- 2. Processor Interface (Nested) ---
    public interface IProcessor<InputType, OutputType>
    {
        OutputType Process(InputType input, Context context);
    }

    // --- 3. Pipeline Interface (Nested) ---
    public interface IPipeline<InputType, OutputType>
    {
        /// <summary>
        /// Executes the full pipeline, creating a new context.
        /// </summary>
        OutputType Execute(InputType input, out Context context);

        /// <summary>
        /// Executes the pipeline steps using a provided context.
        /// (Could be internal or protected if needed)
        /// </summary>
        OutputType ExecuteSubPipeline(InputType input, Context context);
    }



    // --- 5. Terminal Pipeline Implementation (Nested) ---
    // Represents the first step in the pipeline
    public class TerminalPipeline<InputType, OutputType> : PipelineBase<InputType, InputType, OutputType>
    {
        public TerminalPipeline(IProcessor<InputType, OutputType> processor)
            : base(processor) // Pass processor to base constructor
        { }

        /// <summary>
        /// Executes only the first processor in the chain.
        /// </summary>
        public override OutputType ExecuteSubPipeline(InputType input, Context context)
        {
            context.Log($"Executing terminal processor: {currentProcessor.GetType().Name}");
            var result = currentProcessor.Process(input, context);
            context.Log($"Terminal processor finished.");
            return result;
        }
    }

    // --- 6. Wrapper Pipeline Implementation (Nested) ---
    // Represents subsequent steps in the pipeline (the decorator)
    public class Pipeline<InputType, ProcessorInputType, OutputType> : PipelineBase<InputType, ProcessorInputType, OutputType>
    {
        // Reference to the previous part of the pipeline
        private readonly IPipeline<InputType, ProcessorInputType> previousPipeline;

        public Pipeline(
            IProcessor<ProcessorInputType, OutputType> processor,
            IPipeline<InputType, ProcessorInputType> previousPipeline)
            : base(processor) // Pass processor to base constructor
        {
            if (previousPipeline == null) throw new ArgumentNullException(nameof(previousPipeline));
            this.previousPipeline = previousPipeline;
        }

        /// <summary>
        /// Executes the previous pipeline steps first, then the current processor.
        /// </summary>
        public override OutputType ExecuteSubPipeline(InputType input, Context context)
        {
            context.Log($"Executing previous pipeline segment(s)...");
            // 1. Execute the pipeline built so far
            var previousPipelineResult = previousPipeline.ExecuteSubPipeline(input, context);

            context.Log($"Executing intermediate processor: {currentProcessor.GetType().Name}");
            // 2. Process the result with the current processor
            var result = currentProcessor.Process(previousPipelineResult, context);
            context.Log($"Intermediate processor finished.");
            return result;
        }
    }



    // --- 8. Example Processors (Nested) ---
    public class FloatToStringProcessor : IProcessor<float, string>
    {
        public string Process(float input, Context context)
        {
            context.Log($"Processing {input} in FloatToStringProcessor.");
            string result = input.ToString(); // Example: Simple conversion
            context.Log($"Result: {result}");
            return result;
        }
    }

    public class RepeatStringProcessor : IProcessor<string, string>
    {
        public string Process(string input, Context context)
        {
            context.Log($"Processing '{input}' in RepeatStringProcessor.");
            if (string.IsNullOrEmpty(input))
            {
                context.Log($"Input is null or empty, returning as is.");
                return input; // Example of conditional processing
            }
            string result = input + input + input; // Example: Repeat 3 times
            context.Log($"Result: {result}");
            return result;
        }
    }







    // 1. Define a new interface that includes AppendProcessor
    public interface IBuildablePipeline<InputType, OutputType> : IPipeline<InputType, OutputType>
    {
        // Crucially, this returns the IBuildablePipeline interface itself, enabling chaining
        IBuildablePipeline<InputType, NextOutputType> AppendProcessor<NextOutputType>(IProcessor<OutputType, NextOutputType> processor);
    }

    // 2. Modify PipelineBase
    // Make it implement the new interface
    public abstract class PipelineBase<InputType, ProcessorInputType, OutputType> : IBuildablePipeline<InputType, OutputType>
    {
        protected IProcessor<ProcessorInputType, OutputType> currentProcessor;

        public PipelineBase(IProcessor<ProcessorInputType, OutputType> processor)
        {
            if (processor == null) throw new ArgumentNullException(nameof(processor));
            currentProcessor = processor;
        }

        // CHANGE THE RETURN TYPE HERE to IBuildablePipeline
        public IBuildablePipeline<InputType, ProcessorOutputType> AppendProcessor<ProcessorOutputType>(IProcessor<OutputType, ProcessorOutputType> processor)
        {
            // The concrete Pipeline class will implement IBuildablePipeline
            return new Pipeline<InputType, OutputType, ProcessorOutputType>(processor, this);
        }

        // Execute and ExecuteSubPipeline remain as they implement the base IPipeline part
        public OutputType Execute(InputType input, out Context context)
        {
            context = new Context();
            context.ProcessStartedAt = DateTime.Now;
            context.Log("Pipeline execution started.");
            OutputType result;
            try
            {
                result = ExecuteSubPipeline(input, context);
                context.Log("Pipeline execution finished successfully.");
            }
            catch (Exception ex)
            {
                context.Log($"Pipeline execution failed: {ex.Message}");
                context.ProcessEndedAt = DateTime.Now;
                throw;
            }
            context.ProcessEndedAt = DateTime.Now;
            context.Log($"Total execution time: {context.ProcessTimeInMilliseconds} ms.");
            return result;
        }

        public abstract OutputType ExecuteSubPipeline(InputType input, Context context);
    }




    // 5. Modify Static Factory Class
    public static class Pipeline
    {
        // CHANGE THE RETURN TYPE HERE to IBuildablePipeline
        public static IBuildablePipeline<InputType, OutputType> Create<InputType, OutputType>(IProcessor<InputType, OutputType> processor)
        {
            return new TerminalPipeline<InputType, OutputType>(processor);
        }
    }
    // Add this class inside the PipelineSystem class, alongside the others
    public class StringLengthProcessor : IProcessor<string, int> // Takes string, outputs int
    {
        public int Process(string input, Context context)
        {
            context.Log($"Processing '{input}' in StringLengthProcessor.");
            if (input == null)
            {
                context.Log("Input string is null, returning length 0.");
                return 0;
            }
            int length = input.Length;
            context.Log($"Calculated length: {length}");
            return length;
        }
    }



    public class Hipek
    {
        public string name;
        public int height;
        public string eyeColor;
        public string hairColor;

        public Hipek (string name, int height, string eyeColor, string hairColor)
        {
            this.name = name;
            this.height = height;
            this.eyeColor = eyeColor;
            this.hairColor = hairColor;
        }   
    }
    public class ocenionyHipek
    {
        public Hipek hipek;
        public float ocena;
        public ocenionyHipek(Hipek hipek, float ocena)
        {
            this.hipek = hipek; 
            this.ocena = ocena;
        }
    }

    public class HipekProcessorInput :IProcessor<Hipek, ocenionyHipek>
    {
        public ocenionyHipek Process(Hipek input, Context context)
        {

            return new ocenionyHipek(input, 0);
        }

    }
    public class HipekHeightProcessor : IProcessor<ocenionyHipek, ocenionyHipek>
    {
        private float waga = 0;

        public HipekHeightProcessor(float waga)
        {
            this.waga = waga;   
        }

        public ocenionyHipek Process(ocenionyHipek input, Context context)
        {
            if(input == null)
            {
                throw new ArgumentNullException("input");
            }

            if(input.hipek.height > 170)
            {
                input.ocena += 1*waga;
            }

            return input;

            //throw new NotImplementedException();
        }
    }

    public class HipekEyeProcessor : IProcessor<ocenionyHipek, ocenionyHipek>
    {
        private float waga = 0;

        public HipekEyeProcessor(float waga)
        {
            this.waga = waga;
        }
        public ocenionyHipek Process(ocenionyHipek input, Context context)
        {
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.hipek.eyeColor =="niebieski")
            {
                input.ocena += 1 * waga;
            }
            return input;
        }
    }
    public class HipekHairProcessor : IProcessor<ocenionyHipek, ocenionyHipek>
    {
        private float waga = 0;

        public HipekHairProcessor(int waga)
        {
            this.waga = waga;
        }
        public ocenionyHipek Process(ocenionyHipek input, Context context)
        {
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.hipek.eyeColor == "blond")
            {
                input.ocena += 1 * waga;
            }
            return input;
        }
    }

    public class HipekOcenaOgolnaProcessor : IProcessor<ocenionyHipek, string>
    {
        private float passingScore = 0;

        public HipekOcenaOgolnaProcessor(int passingScore)
        {
            this.passingScore= passingScore;
        }
        public string Process(ocenionyHipek input, Context context)
        {
            if(input.ocena >= passingScore)
            {
                return "porządny obywatel";
            }
            else
            {
                return "subhuman filth";
            }

        }
    }





    // --- Now the direct chaining in Main should work ---
    public class Program
    {
        public static void Main()
        {
            bool a = true;

            if (a)
            {

                List<Hipek> hipki = new List<Hipek>
                {
                    new Hipek("Josef",180,"niebieski","blond"),
                    new Hipek("Jose",169,"brązowy" , "brązowy")
                };

                Console.WriteLine("Building extended pipeline with direct chaining (modified design)...");

                // This should now compile and work
                var pipeline = PipelineSystem.Pipeline // Create returns IBuildablePipeline
                    .Create(new HipekProcessorInput()) // Result: IBuildablePipeline<float, string>
                    .AppendProcessor(new HipekEyeProcessor(1)) // Called on IBuildablePipeline, returns IBuildablePipeline<float, string>
                    .AppendProcessor(new HipekHeightProcessor(1))
                    .AppendProcessor(new HipekHairProcessor(1))
                    .AppendProcessor(new HipekOcenaOgolnaProcessor(2))

                    ; // Called on IBuildablePipeline, returns IBuildablePipeline<float, int>

                Console.WriteLine("Executing extended pipeline with input: 5.0f");
                Console.WriteLine($"Expected final output type: {pipeline.GetType().GenericTypeArguments[2]}"); // Check the inferred type


                PipelineSystem.Context ctx;
                try
                {
                    var result = pipeline.Execute(hipki[1], out ctx); // Execute is part of IPipeline, which IBuildablePipeline inherits

                    Console.WriteLine("\n--- Execution Summary ---");
                    Console.WriteLine($"Pipeline final result: {result}");
                    Console.WriteLine($"Pipeline execution took {ctx.ProcessTimeInMilliseconds} milliseconds");
                    Console.WriteLine("\n--- Execution Logs ---");
                    foreach (var log in ctx.Logs) { Console.WriteLine(log); }
                }
                catch (Exception ex) { /* ... error handling ... */ }
                Console.WriteLine("\nPipeline execution finished.");



            }
            else
            {
                Console.WriteLine("Building extended pipeline with direct chaining (modified design)...");

                // This should now compile and work
                var finalPipeline = PipelineSystem.Pipeline // Create returns IBuildablePipeline
                    .Create(new PipelineSystem.FloatToStringProcessor()) // Result: IBuildablePipeline<float, string>
                    .AppendProcessor(new PipelineSystem.RepeatStringProcessor()) // Called on IBuildablePipeline, returns IBuildablePipeline<float, string>
                    .AppendProcessor(new PipelineSystem.StringLengthProcessor()); // Called on IBuildablePipeline, returns IBuildablePipeline<float, int>

                Console.WriteLine("Executing extended pipeline with input: 5.0f");
                Console.WriteLine($"Expected final output type: {finalPipeline.GetType().GenericTypeArguments[2]}"); // Check the inferred type


                PipelineSystem.Context ctx;
                try
                {
                    int result = finalPipeline.Execute(5.0f, out ctx); // Execute is part of IPipeline, which IBuildablePipeline inherits

                    Console.WriteLine("\n--- Execution Summary ---");
                    Console.WriteLine($"Pipeline final result: {result}");
                    Console.WriteLine($"Pipeline execution took {ctx.ProcessTimeInMilliseconds} milliseconds");
                    Console.WriteLine("\n--- Execution Logs ---");
                    foreach (var log in ctx.Logs) { Console.WriteLine(log); }
                }
                catch (Exception ex) { /* ... error handling ... */ }
                Console.WriteLine("\nPipeline execution finished.");
            }

           
        }
    }
}